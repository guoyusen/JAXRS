--创建COMPANY表
CREATE TABLE COMPANY(
    ID NUMBER,
    COMID VARCHAR2(30),
    NAME VARCHAR2(30),
    ADDRESS VARCHAR2(30),
    CONSTRAINT PK_ID PRIMARY KEY(ID)
);

--创建自增序列
CREATE SEQUENCE COMPANY_SEQ_ID INCREMENT BY 1 START WITH 1;

--创建插入前触发器，取得自增ID
CREATE TRIGGER COMPANY_INSERT_ID_TRIGGER BEFORE INSERT ON COMPANY
FOR EACH ROW
BEGIN
SELECT COMPANY_SEQ_ID.NEXTVAL INTO:NEW.ID FROM DUAL;
END;
/

--插入测试数据
INSERT INTO COMPANY (COMID,NAME,ADDRESS) VALUES ('COM_1','NAME_1','ADDRESS_1');
INSERT INTO COMPANY (COMID,NAME,ADDRESS) VALUES ('COM_2','NAME_2','ADDRESS_2');
INSERT INTO COMPANY (COMID,NAME,ADDRESS) VALUES ('COM_3','NAME_3','ADDRESS_3');
INSERT INTO COMPANY (COMID,NAME,ADDRESS) VALUES ('COM_4','NAME_4','ADDRESS_4');
INSERT INTO COMPANY (COMID,NAME,ADDRESS) VALUES ('COM_5','NAME_5','ADDRESS_5');
COMMIT;

--输出格式化
COLUMN ID FORMAT 99;
COLUMN COMID FORMAT A30;
COLUMN NAME FORMAT A30;
COLUMN ADDRESS FORMAT A30;
SET LINESIZE 1000;

--查询COMPANY表的所有数据
SELECT * FROM COMPANY;

--创建类型 COMPANY_TYPE
CREATE OR REPLACE TYPE COMPANY_TYPE AS OBJECT(
	ID NUMBER,
    COMID VARCHAR2(30),
    NAME VARCHAR2(30),
    ADDRESS VARCHAR2(30),
    CONSTRUCTOR FUNCTION COMPANY_TYPE RETURN SELF AS RESULT
);
/

--创建类型 COMPANY_TAB_TYPE
CREATE OR REPLACE TYPE COMPANY_TAB_TYPE AS TABLE OF COMPANY_TYPE;
/

--标准输出打开
SET SERVEROUTPUT ON;

--测试类型
DECLARE 
tabCompany COMPANY_TAB_TYPE;
BEGIN
	tabCompany := COMPANY_TAB_TYPE(COMPANY_TYPE(1,'COM_1','NAME_1','ADDRESS_1'), COMPANY_TYPE(2,'COM_2','NAME_2','ADDRESS_2'));
	dbms_output.put_line('tabCompany:');
	FOR i IN tabCompany.FIRST .. tabCompany.LAST LOOP
		dbms_output.put_line(tabCompany(i).ID||' '||tabCompany(i).COMID||' '||tabCompany(i).NAME||' '||tabCompany(i).ADDRESS);
	END LOOP;
END;
/

--创建管道函数 get_company_list
CREATE OR REPLACE FUNCTION get_company_list(tabCompany COMPANY_TAB_TYPE)
RETURN COMPANY_TAB_TYPE PIPELINED IS
tCompany COMPANY_TYPE;
BEGIN
	FOR i IN tabCompany.FIRST .. tabCompany.LAST LOOP
		tCompany := COMPANY_TYPE(NULL, NULL, NULL, NULL);
		tCompany.ID := tabCompany(i).ID;
		tCompany.COMID := tabCompany(i).COMID;
		
		SELECT NAME, ADDRESS INTO tCompany.NAME, tCompany.ADDRESS FROM COMPANY WHERE ID = tabCompany(i).ID;
		PIPE ROW(tCompany);
	END LOOP;
	RETURN;
END;
/

--测试创建管道函数 get_company_list
DECLARE 
tabCompany COMPANY_TAB_TYPE;
BEGIN
	tabCompany := COMPANY_TAB_TYPE(COMPANY_TYPE(1, 'COM_1', NULL, NULL), COMPANY_TYPE(2,'COM_2', NULL, NULL));
	SELECT get_company_list(tabCompany) INTO tabCompany FROM DUAL;
	FOR i IN tabCompany.FIRST .. tabCompany.LAST LOOP
		dbms_output.put_line(tabCompany(i).ID||' '||tabCompany(i).COMID||' '||tabCompany(i).NAME||' '||tabCompany(i).ADDRESS);
	END LOOP;
END;
/


CREATE OR REPLACE FUNCTION GET_COMPANY
RETURN COMPANY_TYPE AS
   T_COMPANY COMPANY_TYPE;
   BEGIN 
	   T_COMPANY := COMPANY_TYPE(NULL, NULL, NULL, NULL);
	   T_COMPANY.ID := 8;
	   T_COMPANY.COMID := 'TEST';
	   T_COMPANY.NAME := 'TEST NAME';
	   T_COMPANY.ADDRESS := 'TEST ADDRESS';
   RETURN T_COMPANY;
END;
/

CREATE OR REPLACE FUNCTION GET_COMPANY(tmp COMPANY_TYPE) 
RETURN COMPANY_TYPE AS
   T_COMPANY COMPANY_TYPE;
   BEGIN 
	   T_COMPANY := COMPANY_TYPE(NULL, NULL, NULL, NULL);
	   T_COMPANY.ID := 8;
	   T_COMPANY.COMID := 'TEST';
	   T_COMPANY.NAME := 'TEST NAME';
	   T_COMPANY.ADDRESS := 'TEST ADDRESS';
   RETURN T_COMPANY;
END;
/











